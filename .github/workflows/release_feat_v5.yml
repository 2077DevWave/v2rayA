name: Build & Release v2rayA

on:
  push:
    branches: [ feat_v5 ]
    tags:
      - v*
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "gui/**"
      - ".github/workflows/*.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "gui/**"
      - ".github/workflows/*.yml"


jobs:
  
  build:
    
    strategy:
      
      matrix:
        goos: [ linux ]
        goarch: [ arm64, 386, riscv64, mips64, mips64le, mipsle, mips ]
        include:
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Linux AMD64 v1 v2 v3
          - goos: linux
            goarch: amd64
            goamd64: v1
          - goos: linux
            goarch: amd64
            goamd64: v2
          - goos: linux
            goarch: amd64
            goamd64: v3
          # END Linux AMD64 v1 v2 v3
          # BEGIN Windows AMD64 v1 v2 v3
          - goos: windows
            goarch: amd64
            goamd64: v1
          - goos: windows
            goarch: amd64
            goamd64: v2
          - goos: windows
            goarch: amd64
            goamd64: v3
          # END Windows AMD64 v1 v2 v3
          # BEGIN macOS
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
      fail-fast: false

    runs-on: ubuntu-22.04
    
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0
      NAME: v2raya
      DESC: "A web GUI client of Project V which supports VMess, VLESS, SS, SSR, Trojan and Pingtunnel protocols."
    
    steps:
    
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Prepare
      id: prep
      env:
        REF: ${{ github.ref }}
      run: |
        echo "P_DIR=$(pwd)" >> $GITHUB_OUTPUT
        if [[ "$REF" == "refs/tags/v"* ]]; then
          tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          version=${tag:1}
        else
          date=$(git log -1 --format="%cd" --date=short | sed s/-//g)
          count=$(git rev-list --count HEAD)
          commit=$(git rev-parse --short HEAD)
          version="unstable-$date.r${count}.$commit"
        fi
        echo "VERSION=$version" >> $GITHUB_OUTPUT
        echo "VERSION=$version" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ^1.21

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: lts/*
        cache: 'yarn'
        cache-dependency-path: gui/yarn.lock

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2
        bundler-cache: true

    - name: Install Dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y gzip

    - name: Build GUI
      run: |
        yarn --cwd gui --check-files
        yarn --cwd gui build

    - name: Build v2rayA Binaries
      run: |
        mkdir build
        cp -r web service/server/router/
        for file in $(find service/server/router/web |grep -v png |grep -v index.html|grep -v .gz); do
          if [ ! -d $file ];then
            gzip -9 $file
          fi
        done
        cd service
        go build -ldflags="-X github.com/v2rayA/v2rayA/conf.Version=$VERSION -s -w" -o ../build/v2raya_"$GOOS"_"$GOARCH""$GOARM""$GOAMD64"_"$VERSION""$SUFFIX"
        cd ..
        if [ "$GOOS" == "windows" ]; then
          cd build
          mv v2raya_"$GOOS"_"$GOARCH""$GOARM""$GOAMD64"_"$VERSION""$SUFFIX" v2raya_"$GOOS"_"$GOARCH""$GOARM""$GOAMD64"_"$VERSION".exe
          cd ..
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        path: build/*
    